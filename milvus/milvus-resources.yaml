---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: milvus-deployment
  annotations:
    app.openshift.io/connects-to: >-
      [{"apiVersion":"apps/v1","kind":"Deployment","name":"minio-deployment"},{"apiVersion":"apps/v1","kind":"Deployment","name":"etcd-deployment"}]
  labels:
    app.kubernetes.io/part-of: MilvusDB
    app.openshift.io/runtime: golang
spec:
  replicas: 1
  selector:
    matchLabels:
      app: milvus
  template:
    metadata:
      labels:
        app: milvus
    spec:
      containers:
        - name: milvus-container
          image: icr.io/ppc64le-oss/milvus-ppc64le:v2.3.3
          ports:
            - containerPort: 19530
          command:
            - milvus
            - run
            - standalone
          volumeMounts:
            - name: milvus-data
              mountPath: /var/lib/milvus
            - name: milvus-config-data
              mountPath: /milvus/configs/milvus.yaml
              subPath: milvus.yaml
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: "0.5"
              memory: 512Mi
          env:
            - name: ETCD_ENDPOINTS
              value: etcd-service:2379
            - name: MINIO_ADDRESS
              value: minio-service:9000
            - name: MINIO_ACCESS_KEY
              value: minioadmin
            - name: MINIO_SECRET_KEY
              value: minioadmin
      volumes:
        - name: milvus-data
          emptyDir:
            medium: Memory
        - name: milvus-config-data
          configMap:
            name: milvus-config
  strategy:
    type: Recreate
---
apiVersion: v1
kind: Service
metadata:
  name: milvus-service
spec:
  selector:
    app: milvus
  ports:
    - name: api
      protocol: TCP
      port: 19530
      targetPort: 19530
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: milvus-config
binaryData:
  milvus.yaml: 
